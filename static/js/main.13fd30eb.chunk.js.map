{"version":3,"sources":["components/Cell.js","components/Row.js","components/Board.js","helpers/game.js","App.js","index.js"],"names":["Cell","number","className","Row","row","map","num","index","Board","board","handleSwipeLeft","handleSwipeRight","handleSwipeUp","handleSwipeDown","handlers","useSwipeable","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","trackMouse","addNumberRandomly","newBoard","JSON","parse","stringify","x","Math","floor","random","y","compareTwoPositions","options","pos","diference","changeDiference","newDiference","App","useState","setBoard","swipeLeft","toString","swipeRight","swipeUp","swipeDown","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13fd30eb.chunk.js","sourcesContent":["export default function Cell({ number }) {\r\n  return (\r\n    <div className={`board__row__cell board__row__cell__${number}`}>\r\n      <span>{number === 0 ? \"\" : number}</span>\r\n    </div>\r\n  );\r\n}\r\n","import Cell from \"./Cell\";\r\n\r\nexport default function Row({ row }) {\r\n  return (\r\n    <div className=\"board__row\">\r\n      {row.map((num, index) => (\r\n        <Cell key={`cell-${index + 1}`} number={num} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import Row from \"./Row\";\r\nimport { useSwipeable } from \"react-swipeable\";\r\n\r\nexport default function Board({ board, handleSwipeLeft, handleSwipeRight, handleSwipeUp, handleSwipeDown }) {\r\n\r\n  const handlers = useSwipeable({\r\n    onSwipedLeft: () => handleSwipeLeft(),\r\n    onSwipedRight: () => handleSwipeRight(),\r\n    onSwipedUp: () => handleSwipeUp(),\r\n    onSwipedDown: () => handleSwipeDown(),\r\n    preventDefaultTouchmoveEvent: true,\r\n    trackMouse: true\r\n  });\r\n  return (\r\n    <div className=\"board\" {...handlers}>\r\n      {board.map((row, index) => (\r\n        <Row key={`row-${index + 1}`} row={row} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","export { swipeLeft, swipeRight, swipeUp, swipeDown, addNumberRandomly };\r\n\r\nfunction swipeLeft(board) {\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n\r\n  for (let x = 0; x < 4; x++) {\r\n    for (let y = 0; y < 3; y++) {\r\n      const options = {\r\n        board: newBoard,\r\n        pos: { x, y },\r\n        diference: { x: 0, y: 1 },\r\n      };\r\n      newBoard = compareTwoPositions(options);\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nfunction swipeRight(board) {\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n\r\n  for (let x = 0; x < 4; x++) {\r\n    for (let y = 3; y > 0; y--) {\r\n      const options = {\r\n        board: newBoard,\r\n        pos: { x, y },\r\n        diference: { x: 0, y: -1 },\r\n      };\r\n      newBoard = compareTwoPositions(options);\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nfunction swipeUp(board) {\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n\r\n  for (let y = 0; y < 4; y++) {\r\n    for (let x = 0; x < 3; x++) {\r\n      const options = {\r\n        board: newBoard,\r\n        pos: { x, y },\r\n        diference: { x: 1, y: 0 },\r\n      };\r\n      newBoard = compareTwoPositions(options);\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nfunction swipeDown(board) {\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n\r\n  for (let y = 0; y < 4; y++) {\r\n    for (let x = 3; x > 0; x--) {\r\n      const options = {\r\n        board: newBoard,\r\n        pos: { x, y },\r\n        diference: { x: -1, y: 0 },\r\n      };\r\n      newBoard = compareTwoPositions(options);\r\n    }\r\n  }\r\n  return newBoard;\r\n}\r\n\r\nfunction addNumberRandomly(board) {\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n  const x = Math.floor(Math.random() * 4);\r\n  const y = Math.floor(Math.random() * 4);\r\n  if (newBoard[x][y] === 0) {\r\n    newBoard[x][y] = Math.random() > 0.8 ? 4 : 2;\r\n  } else {\r\n    newBoard = addNumberRandomly(board);\r\n  }\r\n\r\n  return newBoard;\r\n}\r\n\r\nfunction compareTwoPositions(options) {\r\n  //pos -> base position\r\n  //diference -> diference between the position compared and the base position\r\n  const { board, pos, diference } = options;\r\n  let newBoard = JSON.parse(JSON.stringify(board));\r\n\r\n  if (\r\n    newBoard[pos.x][pos.y] === 0 &&\r\n    newBoard[pos.x + diference.x][pos.y + diference.y] !== 0\r\n  ) {\r\n    newBoard[pos.x][pos.y] = newBoard[pos.x + diference.x][pos.y + diference.y];\r\n    newBoard[pos.x + diference.x][pos.y + diference.y] = 0;\r\n  }\r\n  \r\n  if (\r\n    newBoard[pos.x][pos.y] !== 0 &&\r\n    newBoard[pos.x + diference.x][pos.y + diference.y] ===\r\n      newBoard[pos.x][pos.y]\r\n  ) {\r\n    newBoard[pos.x][pos.y] = newBoard[pos.x][pos.y] * 2;\r\n    newBoard[pos.x + diference.x][pos.y + diference.y] = 0;\r\n  } else if (newBoard[pos.x + diference.x][pos.y + diference.y] === 0) {\r\n    diference.x = changeDiference(pos.x, diference.x);\r\n    diference.y = changeDiference(pos.y, diference.y);\r\n\r\n    if (diference.x !== 0 || diference.y !== 0) {\r\n      newBoard = compareTwoPositions({ board: newBoard, pos, diference });\r\n    }\r\n  }\r\n\r\n  return newBoard;\r\n}\r\n\r\nfunction changeDiference(pos, diference) {\r\n  //returns 0 if can't go further\r\n  const newDiference = [0, 2, 3];\r\n  if (diference > 0 && pos + diference < 3) {\r\n    return newDiference[diference];\r\n  } else if (diference < 0 && pos + diference > 0) {\r\n    return newDiference[diference * -1] * -1;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n","import { useState } from \"react\";\n\nimport Board from \"./components/Board\";\nimport {\n  swipeLeft,\n  swipeRight,\n  swipeUp,\n  swipeDown,\n  addNumberRandomly,\n} from \"./helpers/game\";\nimport \"./style/App.scss\";\n\nfunction App() {\n  const initialBoard = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  const [board, setBoard] = useState(addNumberRandomly(initialBoard));\n\n  function handleSwipeLeft() {\n    let newBoard = swipeLeft(board);\n\n    if (board.toString() !== newBoard.toString()) {\n      newBoard = addNumberRandomly(newBoard);\n      setBoard(newBoard);\n    }\n  }\n\n  function handleSwipeRight() {\n    let newBoard = swipeRight(board);\n    if (board.toString() !== newBoard.toString()) {\n      newBoard = addNumberRandomly(newBoard);\n      setBoard(newBoard);\n    }\n  }\n\n  function handleSwipeUp() {\n    let newBoard = swipeUp(board);\n    if (board.toString() !== newBoard.toString()) {\n      newBoard = addNumberRandomly(newBoard);\n      setBoard(newBoard);\n    }\n  }\n\n  function handleSwipeDown() {\n    let newBoard = swipeDown(board);\n    if (board.toString() !== newBoard.toString()) {\n      newBoard = addNumberRandomly(newBoard);\n      setBoard(newBoard);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <Board\n        board={board}\n        handleSwipeLeft={handleSwipeLeft}\n        handleSwipeRight={handleSwipeRight}\n        handleSwipeUp={handleSwipeUp}\n        handleSwipeDown={handleSwipeDown}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}